/**
 * List of the Java AST nodes
 * // TODO : remove aliases
 */
export enum SyntaxKind {

    compilationUnit = 'compilationUnit',
    ordinaryCompilationUnit = 'ordinaryCompilationUnit',
    SourceFile = 'sourceFile',
    Result = 'result',
    PackageDeclaration = 'packageDeclaration',
    importDeclaration = 'importDeclaration',
    import = 'import',
    packageOrTypeName = 'packageOrTypeName',  
    classDeclaration = 'classDeclaration',
    classModifier = 'classModifier',
    normalClassDeclaration = 'normalClassDeclaration',
    enumDeclaration = 'enumDeclaration',
    Class = 'Class',
    typeIdentifier = 'typeIdentifier',
    typeDeclaration = 'typeDeclaration',
    typeParameters = 'typeParameters',
    superclass = 'superclass',
    superinterfaces = 'superinterfaces',
    classBody = 'classBody',
    annotation = 'annotation',
    Public = 'Public',
    Protected = 'Protected',
    Private = 'Private',
    Abstract = 'Abstract',
    Static = 'Static',
    Final = 'Final',
    Strictfp = 'Strictfp',
    Less = 'Less',
    typeParameterList = 'typeParameterList',
    Greater = 'Greater',
    typeParameter = 'typeParameter',
    Comma = 'Comma',
    Extends = 'Extends',
    classType = 'classType',
    Implements = 'Implements',
    interfaceTypeList = 'interfaceTypeList',
    interfaceType = 'interfaceType',
    LCurly = 'LCurly',
    classBodyDeclaration = 'classBodyDeclaration',
    RCurly = 'RCurly',
    fieldDeclaration = 'fieldDeclaration',
    semiColon = 'semiColon',
    instanceInitializer = 'instanceInitializer',
    staticInitializer = 'staticInitializer',
    constructorDeclaration = 'constructorDeclaration',
    classMemberDeclaration = 'classMemberDeclaration',
    methodDeclaration = 'methodDeclaration',
    methodDeclarator = 'methodDeclarator',
    methodModifier = 'methodModifier',
    interfaceDeclaration = 'interfaceDeclaration',
    Semicolon = 'Semicolon',
    fieldModifier = 'fieldModifier',
    unannType = 'unannType',
    unannClassType = 'unannClassType',
    variableDeclaratorList = 'variableDeclaratorList',
    Transient = 'Transient',
    Volatile = 'Volatile',
    variableDeclarator = 'variableDeclarator',
    Equals = 'Equals',
    Identifier = 'Identifier',
    dims = 'dims',
    expression = 'expression',
    arrayInitializer = 'arrayInitializer',
    unannPrimitiveType = 'unannPrimitiveType',
    isDims = 'isDims',
    unannReferenceType = 'unannReferenceType',
    numericType = 'numericType',
    Boolean = 'Boolean',
    typeArguments = 'typeArguments',
    Dot = 'Dot',
    methodHeader = 'methodHeader',
    methodBody = 'methodBody',
    Synchronized = 'Synchronized',
    Native = 'Native',
    throws = 'throws',
    Void = 'Void',
    LBrace = 'LBrace',
    formalParameterList = 'formalParameterList',
    RBrace = 'RBrace',
    This = 'This',
    formalParameter = 'formalParameter',
    variableParaRegularParameter = 'variableParaRegularParameter',
    variableArityParameter = 'variableArityParameter',
    variableModifier = 'variableModifier',
    DotDotDot = 'DotDotDot',
    variableDeclaratorId = 'variableDeclaratorId',
    Throws = 'Throws',
    exceptionTypeList = 'exceptionTypeList',
    exceptionType = 'exceptionType',
    block = 'block',
    constructorModifier = 'constructorModifier',
    constructorDeclarator = 'constructorDeclarator',
    constructorBody = 'constructorBody',
    simpleTypeName = 'simpleTypeName',
    receiverParameter = 'receiverParameter',
    explicitConstructorInvocation = 'explicitConstructorInvocation',
    unqualifiedExplicitConstructorInvocation = 'unqualifiedExplicitConstructorInvocation',
    qualifiedExplicitConstructorInvocation = 'qualifiedExplicitConstructorInvocation',
    Super = 'Super',
    Enum = 'Enum',
    enumBody = 'enumBody',
    enumBodyDeclarations = 'enumBodyDeclarations',
    enumConstant = 'enumConstant',
    At = 'At',
    enumConstantModifier = 'enumConstantModifier',
    argumentList = 'argumentList',
    isEmptyTypeDeclaration = 'isEmptyTypeDeclaration',
    Interface = 'Interface',
    tokenType = 'tokenType',
    expressionName = 'expressionName',
    typeName = 'typeName',
}